pragma solidity ^0.4.24;
pragma experimental ABIEncoderV2;

// Define a contract 'Supplychain'
contract SupplyChain {

    // Define 'owner'
    address owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State
    {
        Harvested,    // 0
        Processed,    // 1
        Packed,       // 2
        ForSale,      // 3
        Sold,         // 4
        Shipped,      // 5
        Received,     // 6
        Purchased     // 7
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        // Stock Keeping Unit (SKU)
        uint sku;

        // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        uint upc;

        // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address ownerID;

        // Metamask-Ethereum address of the Farmer
        address originFarmerID;

        // Farmer Name
        string originFarmName;

        // Farmer Information
        string originFarmInformation;

        // Farm Latitude
        string originFarmLatitude;

        // Farm Longitude
        string originFarmLongitude;

        // Product ID potentially a combination of upc + sku
        uint productID;

        // Product Notes
        string productNotes;

        // Product Price
        uint productPrice;

        // Product State as represented in the enum above
        State itemState;

        // Metamask-Ethereum address of the Distributor
        address distributorID;

        // Metamask-Ethereum address of the Retailer
        address retailerID;

        // Metamask-Ethereum address of the Consumer
        address consumerID;
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Define a modifer that verifies the Caller
    // modifier verifyCaller (address _address) {
    //     require(msg.sender == _address);
    //     _;
    // }

    // // Define a modifier that checks if the paid amount is sufficient to cover the price
    // modifier paidEnough(uint _price) {
    //     require(msg.value >= _price);
    //     _;
    // }

    // Define a modifier that checks the price and refunds the remaining balance
    // modifier checkValue(uint _upc) {
    //     uint _price = items[_upc].productPrice;
    //     uint amountToReturn = msg.value - _price;
    //     items[_upc].consumerID.transfer(amountToReturn);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Harvested
    // modifier harvested(uint _upc) {
    //     require(items[_upc].itemState == State.Harvested);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Processed
    // modifier processed(uint _upc) {
    //     require(items[_upc].itemState == State.Processed);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Packed
    // modifier packed(uint _upc) {
    //     require(items[_upc].itemState == State.Packed);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is ForSale
    // modifier forSale(uint _upc) {
    //     require(items[_upc].itemState == State.ForSale);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Sold
    // modifier sold(uint _upc) {
    //     require(items[_upc].itemState == State.Sold);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Shipped
    // modifier shipped(uint _upc) {
    //     require(items[_upc].itemState == State.Shipped);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Received
    // modifier received(uint _upc) {
    //     require(items[_upc].itemState == State.Received);
    //     _;
    // }

    // // Define a modifier that checks if an item.state of a upc is Purchased
    // modifier purchased(uint _upc) {
    //     require(items[_upc].itemState == State.Purchased);
    //     _;
    // }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner) {
            selfdestruct(owner);
        }
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint _upc,
        address _originFarmerID,
        string _originFarmName,
        string _originFarmInformation,
        string _originFarmLatitude,
        string _originFarmLongitude,
        string _productNotes
    )
        public
    {
        // Add the new item as part of Harvest

        items[_upc] = Item({
            sku: sku,
            upc: _upc,
            ownerID: _originFarmerID,
            originFarmerID: _originFarmerID,
            originFarmName: _originFarmName,
            originFarmInformation: _originFarmInformation,
            originFarmLatitude: _originFarmLatitude,
            originFarmLongitude: _originFarmLongitude,
            productID: sku + _upc,
            productNotes: _productNotes,
            productPrice: 0,
            itemState: State.Harvested,
            distributorID: 0x0,
            retailerID: 0x0,
            consumerID: 0x0
        });

        // Increment sku
        sku = sku + 1;

        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function processItem(uint _upc) public {
        Item storage item = items[_upc];

        require(msg.sender == item.originFarmerID, "origin farmer is required for this action");

        require(item.itemState == State.Harvested, "item is not harvested yet");

        item.itemState = State.Processed;

        emit Processed(_upc);
        // Emit the appropriate event
        // Update the appropriate fields
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function packItem(uint _upc) public {
        Item storage item = items[_upc];

        require(msg.sender == item.originFarmerID, "origin farmer is required for this action");

        require(item.itemState == State.Processed, "item is not processed yet");

        item.itemState = State.Packed;

        emit Packed(_upc);
        // Update the appropriate fields
        // Emit the appropriate event
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function sellItem(uint _upc, uint _price) public {
        Item storage item = items[_upc];

        require(msg.sender == item.originFarmerID, "origin farmer is required for this action");

        require(item.itemState == State.Packed, "item is not packed yet");

        item.itemState = State.ForSale;
        item.productPrice = _price;

        emit ForSale(_upc);
        // Update the appropriate fields
        // Emit the appropriate event
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifer to check if buyer has paid enough
    // Call modifer to send any excess ether back to buyer
    function buyItem(uint _upc) public payable {
        Item storage item = items[_upc];

        // check if is distributor

        require(item.itemState == State.ForSale, "item is not for sale yet");

        require(msg.value >= item.productPrice, "insufficient value");

        item.ownerID = msg.sender;
        item.distributorID = msg.sender;
        item.itemState = State.Sold;

        uint _price = item.productPrice;
        uint amountToReturn = msg.value - _price;
        item.consumerID.transfer(amountToReturn);

        emit Sold(_upc);
        // Update the appropriate fields - ownerID, distributorID, itemState
        // Transfer money to farmer
        // emit the appropriate event
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    // Call modifier to check if upc has passed previous supply chain stage
    // Call modifier to verify caller of this function
    function shipItem(uint _upc) public {
        Item storage item = items[_upc];

        require(item.itemState == State.Sold);

        require(msg.sender == item.distributorID);

        item.itemState = State.Shipped;

        emit Shipped(_upc);
        // Update the appropriate fields
        // Emit the appropriate event
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    // Call modifier to check if upc has passed previous supply chain stage
    // Access Control List enforced by calling Smart Contract / DApp
    function receiveItem(uint _upc) public {
        Item storage item = items[_upc];

        // check if is retailer

        require(item.itemState == State.Shipped);

        item.ownerID = msg.sender;
        item.retailerID = msg.sender;
        item.itemState = State.Received;

        emit Received(_upc);
        // Update the appropriate fields - ownerID, retailerID, itemState
        // Emit the appropriate event
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    // Call modifier to check if upc has passed previous supply chain stage
    // Access Control List enforced by calling Smart Contract / DApp
    function purchaseItem(uint _upc) public {
        Item storage item = items[_upc];

        // check if is consumer

        require(item.itemState == State.Received);

        item.ownerID = msg.sender;
        item.consumerID = msg.sender;
        item.itemState = State.Purchased;

        emit Purchased(_upc);
        // Update the appropriate fields - ownerID, consumerID, itemState
        // Emit the appropriate event
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns (
        uint itemSKU,
        uint itemUPC,
        address ownerID,
        address originFarmerID,
        string originFarmName,
        string originFarmInformation,
        string originFarmLatitude,
        string originFarmLongitude
    )
    {
        Item storage item = items[_upc];

        return (
            item.sku,
            item.upc,
            item.ownerID,
            item.originFarmerID,
            item.originFarmName,
            item.originFarmInformation,
            item.originFarmLatitude,
            item.originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns (
        uint itemSKU,
        uint itemUPC,
        uint productID,
        string productNotes,
        uint productPrice,
        uint itemState,
        address distributorID,
        address retailerID,
        address consumerID
    )
    {
        Item storage item = items[_upc];

        return (
            item.sku,
            item.upc,
            item.productID,
            item.productNotes,
            item.productPrice,
            uint256(item.itemState),
            item.distributorID,
            item.retailerID,
            item.consumerID
        );
    }

    function fetchItem(uint _upc) public view returns (Item) {
        return items[_upc];
    }

    function stateToString(uint state) external pure returns (string) {
        if (state == uint(State.Harvested)) {
            return "Harvested";
        } else if (state == uint(State.Processed)) {
            return "Processed";
        } else if (state == uint(State.Packed)) {
            return "Packed";
        } else if (state == uint(State.ForSale)) {
            return "ForSale";
        } else if (state == uint(State.Sold)) {
            return "Sold";
        } else if (state == uint(State.Shipped)) {
            return "Shipped";
        } else if (state == uint(State.Received)) {
            return "Received";
        } else if (state == uint(State.Purchased)) {
            return "Purchased";
        }
    }
}
